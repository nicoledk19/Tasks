strength_Aa = 0,
strength_aa = 0,
strength_A = NULL,
population = "all",
time,
start = TRUE,
start_frequency= 1,
Ne=1000,
position = 0.2,
force_keep = TRUE,
locus_group = "all"
)
model<-coal_model(1000, 2)+
feat_selection(strength_AA = 100,
strength_Aa = 0,
strength_aa = 0,
strength_A = NULL,
population = "all",
time,
start = TRUE,
start_frequency= 1,
Ne=1000,
position = 0.2,
force_keep = TRUE,
locus_group = "all"
)
model<-coal_model(1000, 2)+
feat_selection(strength_AA = 100,
strength_Aa = 0,
strength_aa = 0,
strength_A = NULL,
population = "all",
start = TRUE,
start_frequency= 1,
Ne=1000,
position = 0.2,
force_keep = TRUE,
locus_group = "all"
)
model<-coal_model(1000, 2)+
feat_selection(strength_AA = 100,
strength_Aa = 0,
strength_aa = 0,
strength_A = NULL,
population = "all",
start = TRUE,
time = TRUE,
start_frequency= 1,
Ne=1000,
position = 0.2,
force_keep = TRUE,
locus_group = "all"
)
model<-coal_model(1000, 2)+
feat_selection(strength_AA = 100,
strength_Aa = 0,
strength_aa = 0,
strength_A = NULL,
population = "all",
start = TRUE,
time == TRUE,
start_frequency= 1,
Ne=1000,
position = 0.2,
force_keep = TRUE,
locus_group = "all"
)
model<-coal_model(1000, 2)+
feat_selection(strength_AA = 100,
strength_Aa = 0,
strength_aa = 0,
strength_A = NULL,
population = "all",
start = TRUE,
time = TRUE,
start_frequency= 1,
Ne=1000,
position = 0.2,
force_keep = TRUE,
locus_group = "all"
)
model<-coal_model(1000, 2)+
feat_selection(strength_AA = 100,
strength_Aa = 0,
strength_aa = 0,
strength_A = NULL,
population = "all",
start = TRUE,
time = 1,
start_frequency= 1,
Ne=1000,
position = 0.2,
force_keep = TRUE,
locus_group = "all"
)
model
model<-coal_model(1000, 2)+
feat_selection(strength_AA = 100,
strength_Aa = 0,
strength_aa = 0,
strength_A = NULL,
population = "all",
start = TRUE,
time = 1,
start_frequency= 1,
Ne=1000,
position = 0.2,
force_keep = TRUE,
locus_group = "all"
)+
feat_migration(0.5, symmetric=FALSE)
model<-coal_model(1000, 2)+
feat_selection(strength_AA = 100,
strength_Aa = 0,
strength_aa = 0,
strength_A = NULL,
population = "all",
start = TRUE,
time = 1,
start_frequency= 1,
Ne=1000,
position = 0.2,
force_keep = TRUE,
locus_group = "all"
)+
feat_migration(1, symmetric=FALSE)
?feat_selection
model<-coal_model(1000, 2)+
feat_selection(strength_AA = 1,
strength_Aa = 0,
strength_aa = 0,
time = 1)
simulate(model)
model<-coal_model(1000, 2)+
feat_migration(0.5)
#feat_selection(strength_AA = 1,
# strength_Aa = 0,
#strength_aa = 0,
#time = 1)
simulate(model)
model<-coal_model(1000, 2)+
feat_migration(0.5)
model<-coal_model(1000)+feat_migration(0.5)
?coal_model
model<-coal_model(sample_size=100, loci_number = 2) + feat_mutation(0.5)
simulate(model)
model
#feat_selection(strength_AA = 1,
# strength_Aa = 0,
#strength_aa = 0,
#time = 1)
simulate(model)
dev.off()
dev.off()
dev.off()
plot(He_lobster, Ho_lobster, xlab="expected H", ylab="observed H", pch=21, bg="gray", xlim=c(0.32, 0.405), ylim=c(0.32, 0.405))
abline(0,1,lty=3)
abline(lm(Ho_lobster~He_lobster), lty=2, lwd=1.25, col='red')
dev.off()
dev.off()
#feat_selection(strength_AA = 1,
# strength_Aa = 0,
#strength_aa = 0,
#time = 1)
simulate(model)
model<-coal_model(sample_size=1000, loci_number = 2) + feat_mutation(0.5)
#feat_selection(strength_AA = 1,
# strength_Aa = 0,
#strength_aa = 0,
#time = 1)
simulate(model)
#feat_selection(strength_AA = 1,
# strength_Aa = 0,
#strength_aa = 0,
#time = 1)
x<-1
#feat_selection(strength_AA = 1,
# strength_Aa = 0,
#strength_aa = 0,
#time = 1)
mutation<-c()
x<-1
model<-coal_model(sample_size=1000, loci_number = 2) + feat_mutation(0.5)
mutation<-c()
x<-1
simulate(model)
[1]
model[1]
simulate(model)
plot(model, pi)
simulate(model)
plot(model, pi)
for(x in mutation){
if(x<1000){
simulate(model)
}
for(x in mutation){
if(x<1000){
simulate(model)
}
}
for(x in mutation){
if(x<1000){
simulate(model)
}
}
dev.off()
dev.off()
dev.off()
model<-coal_model(sample_size=1000, loci_number = 2) + feat_mutation(0.5)
setwd('C:\\Users\\Nicole\\Desktop\\Evolution\\Tasks\\Task_05')
library(adegenet)
library(poppr)
library(dplyr)
library(hierfstat)
library(reshape2)
library(ggplot2)
library(RColorBrewer)
library(scales)
lobster<-read.csv("https://jonsmitchell.com/data/lobster_genotypes.csv")
lobster
lobster_wide<-reshape(lobster, idvar=c("ID", "Site"), timevar = "Locus", direction="wide", sep = "")
colnames(lobster_wide)<-gsub("Genotype", "", colnames(lobster_wide))
snpgeno<-lobster_wide[,3:ncol(lobster_wide)]
snpgeno
snps_to_remove<-c("25580", "32362", "41521", "53889", "65376", "8953", "21197", "15531", "22740", "28357", "33066", "51507", "53052", "53263", "21880", "22323", "22365")
snpgeno<-snpgeno[,!colnames(snpgeno)%in%snps_to_remove]
ind<-as.character(lobster_wide$ID)
site<-as.character(lobster_wide$Site)
lobster_gen<-df2genind(snpgeno, ploidy = 2, ind.names = ind, pop = site, sep = "")
lobster_gen
lobster_gen<- missingno(lobster_gen, type="geno", cutoff = 0.20)
mlg(lobster_gen)
dups_lobster<-mlg.id(lobster_gen)
lob_dups<-c()
x<-1
for(i in dups_lobster){
if(length(dups_lobster[i])>1){
lob_dups[x]<-i
x<-x+1
}
}
lob_Nodups<-indNames(lobster_gen)[!indNames(lobster_gen)%in%lob_dups]
lobster_gen<-lobster_gen[lob_Nodups, ]
summary(lobster_gen$pop)
basic_lobster<-basic.stats(lobster_gen, diploid = TRUE)
Ho_lobster<-round(apply(basic_lobster$Ho, MARGIN=2, FUN=mean, na.rm=TRUE), digits=3)
He_lobster<-round(apply(basic_lobster$Hs, MARGIN=2, FUN=mean, na.rm=TRUE), digits=3)
pdf("005_plot01.pdf")
par(mar=c(4,4,1,1), las=1, mgp=c(2,0.25, 0), tck=-0.005, cex.lab=1.25)
plot(He_lobster, Ho_lobster, xlab="expected H", ylab="observed H", pch=21, bg="gray", xlim=c(0.32, 0.405), ylim=c(0.32, 0.405))
abline(0,1,lty=3)
abline(lm(Ho_lobster~He_lobster), lty=2, lwd=1.25, col='red')
dev.off()
Fis<-apply(basic_lobster$Fis, MARGIN=2, FUN=mean, na.rm=TRUE)
lobster_gen_sub<-popsub(lobster_gen, sublist=c("Ale", "Ber", "Brd", "Pad", "Sar17", "Vig"))
lobster_fst<-genet.dist(lobster_gen_sub, method = "WC84")%>%round(digits=3)
lab_order<-c("Ber", "Brd", "Pad", "Vig", "Sar17", "Ale")
fst.mat<-as.matrix(lobster_fst)
fst.mat1<-fst.mat[lab_order,]
fst.mat2<-fst.mat1[, lab_order]
ind<-which(upper.tri(fst.mat2), arr.ind=TRUE)
fst.df<-data.frame(Site1 = dimnames(fst.mat2)[[2]][ind[,2]],
Site2=dimnames(fst.mat2)[[1]][ind[,1]],
Fst=fst.mat2[ind])
fst.df$Site1<-factor(fst.df$Site1,levels=unique(fst.df$Site1))
fst.dfSite2<-factor(fst.df$Site2,levels=unique(fst.df$Site2))
fst.df$Fst[fst.df$Fst < 0]<-0
fst.label<-expression(italic("F")[ST])
mid<-max(fst.df$Fst)/2
pdf("005_plot02.pdf")
ggplot(data=fst.df, aes(x=Site1, y=Site2, fill=Fst))+
geom_tile(colour="black")+
geom_text(aes(label=Fst), color="black", size=3)+
scale_fill_gradient2(low="blue", mid="pink", high="red", midpoint=mid, name=fst.label, limits=c(0,max(fst.df$Fst)), breaks=c(0,0.05, 0.10, 0.15))+
scale_x_discrete(expand=c(0,0))+
scale_y_discrete(expand=c(0,0), position="right")+
theme(axis.text = element_text(colour="black", size=10, face="bold"),
axis.title=element_blank(),
panel.grid=element_blank(),
panel.background=element_blank(),
legend.position="right",
legend.title=element_text(size=14,face="bold"),
legend.text=element_text(size=10)
)
dev.off()
#learnPopGen
install.packages('learnPopGen')
library(learnPopGen)
pdf("Coalescent1.pdf")
coalescent.plot()
pdf("Coalescent2.pdf")
coalescent.plot()
pdf("Coalescent3.pdf")
coalescent.plot()
dev.off()
setwd('C:\\Users\\Nicole\\Desktop\\Evolution\\Tasks\\Task_05')
setwd('C:\\Users\\Nicole\\Desktop\\Evolution\\Tasks\\Task_05')
library(adegenet)
library(poppr)
library(dplyr)
library(hierfstat)
library(reshape2)
library(ggplot2)
library(RColorBrewer)
library(scales)
lobster<-read.csv("https://jonsmitchell.com/data/lobster_genotypes.csv")
lobster
lobster_wide<-reshape(lobster, idvar=c("ID", "Site"), timevar = "Locus", direction="wide", sep = "")
colnames(lobster_wide)<-gsub("Genotype", "", colnames(lobster_wide))
snpgeno<-lobster_wide[,3:ncol(lobster_wide)]
snpgeno
snps_to_remove<-c("25580", "32362", "41521", "53889", "65376", "8953", "21197", "15531", "22740", "28357", "33066", "51507", "53052", "53263", "21880", "22323", "22365")
snpgeno<-snpgeno[,!colnames(snpgeno)%in%snps_to_remove]
ind<-as.character(lobster_wide$ID)
site<-as.character(lobster_wide$Site)
lobster_gen<-df2genind(snpgeno, ploidy = 2, ind.names = ind, pop = site, sep = "")
lobster_gen
lobster_gen<- missingno(lobster_gen, type="geno", cutoff = 0.20)
mlg(lobster_gen)
dups_lobster<-mlg.id(lobster_gen)
lob_dups<-c()
x<-1
for(i in dups_lobster){
if(length(dups_lobster[i])>1){
lob_dups[x]<-i
x<-x+1
}
}
lob_Nodups<-indNames(lobster_gen)[!indNames(lobster_gen)%in%lob_dups]
lobster_gen<-lobster_gen[lob_Nodups, ]
summary(lobster_gen$pop)
basic_lobster<-basic.stats(lobster_gen, diploid = TRUE)
Ho_lobster<-round(apply(basic_lobster$Ho, MARGIN=2, FUN=mean, na.rm=TRUE), digits=3)
He_lobster<-round(apply(basic_lobster$Hs, MARGIN=2, FUN=mean, na.rm=TRUE), digits=3)
pdf("005_plot01.pdf")
par(mar=c(4,4,1,1), las=1, mgp=c(2,0.25, 0), tck=-0.005, cex.lab=1.25)
plot(He_lobster, Ho_lobster, xlab="expected H", ylab="observed H", pch=21, bg="gray", xlim=c(0.32, 0.405), ylim=c(0.32, 0.405))
abline(0,1,lty=3)
abline(lm(Ho_lobster~He_lobster), lty=2, lwd=1.25, col='red')
dev.off()
Fis<-apply(basic_lobster$Fis, MARGIN=2, FUN=mean, na.rm=TRUE)
lobster_gen_sub<-popsub(lobster_gen, sublist=c("Ale", "Ber", "Brd", "Pad", "Sar17", "Vig"))
lobster_fst<-genet.dist(lobster_gen_sub, method = "WC84")%>%round(digits=3)
lab_order<-c("Ber", "Brd", "Pad", "Vig", "Sar17", "Ale")
fst.mat<-as.matrix(lobster_fst)
fst.mat1<-fst.mat[lab_order,]
fst.mat2<-fst.mat1[, lab_order]
ind<-which(upper.tri(fst.mat2), arr.ind=TRUE)
fst.df<-data.frame(Site1 = dimnames(fst.mat2)[[2]][ind[,2]],
Site2=dimnames(fst.mat2)[[1]][ind[,1]],
Fst=fst.mat2[ind])
fst.df$Site1<-factor(fst.df$Site1,levels=unique(fst.df$Site1))
fst.dfSite2<-factor(fst.df$Site2,levels=unique(fst.df$Site2))
fst.df$Fst[fst.df$Fst < 0]<-0
fst.label<-expression(italic("F")[ST])
mid<-max(fst.df$Fst)/2
pdf("005_plot02.pdf")
ggplot(data=fst.df, aes(x=Site1, y=Site2, fill=Fst))+
geom_tile(colour="black")+
geom_text(aes(label=Fst), color="black", size=3)+
scale_fill_gradient2(low="blue", mid="pink", high="red", midpoint=mid, name=fst.label, limits=c(0,max(fst.df$Fst)), breaks=c(0,0.05, 0.10, 0.15))+
scale_x_discrete(expand=c(0,0))+
scale_y_discrete(expand=c(0,0), position="right")+
theme(axis.text = element_text(colour="black", size=10, face="bold"),
axis.title=element_blank(),
panel.grid=element_blank(),
panel.background=element_blank(),
legend.position="right",
legend.title=element_text(size=14,face="bold"),
legend.text=element_text(size=10)
)
dev.off()
#learnPopGen
install.packages('learnPopGen')
library(learnPopGen)
pdf("Coalescent1.pdf")
coalescent.plot()
pdf("Coalescent2.pdf")
coalescent.plot()
pdf("Coalescent3.pdf")
coalescent.plot()
dev.off()
#extracredit
install.packages('coala')
library(coala)
model<-coal_model(sample_size=1000, loci_number = 2) + feat_mutation(0.5) + sumstat_nucleotide_div()
simulate(model)
model1<-coal_model(sample_size=1000, loci_number = 2) + feat_mutation(1) + sumstat_nucleotide_div()
simulate(model1)
model1<-coal_model(sample_size=1000, loci_number = 2) + feat_mutation(0) + sumstat_nucleotide_div()
simulate(model1)
simulate(model)
simulate(model)
model<-coal_model(sample_size=10, loci_number = 2) + feat_mutation(0.5) + sumstat_nucleotide_div()
simulate(model)
model<-coal_model(sample_size=10, loci_number = 10) + feat_mutation(0.5) + sumstat_nucleotide_div()
simulate(model)
model1<-coal_model(sample_size=10, loci_number = 10) + feat_mutation(0) + sumstat_nucleotide_div()
simulate(model1)
plot(model, model1)
plot(model, sumstat_nucleotide_div())
plot(model1, model)
plot(model, pi)
plot(model1, pi)
model<-coal_model(sample_size=100, loci_number = 10) + feat_mutation(0.5) + sumstat_nucleotide_div()
simulate(model)
model1<-coal_model(sample_size=100, loci_number = 10) + feat_mutation(0) + sumstat_nucleotide_div()
simulate(model1)
plot(model[pi], model1[pi])
plot(model[pi], model1[pi], xlim=0, ylim=10)
plot(model[pi], model1[pi], xlim=100, ylim=10)
plot(model[pi], model1[pi], xlim=-5, ylim=10)
?xlim
plot(model[pi], model1[pi], xlim=c(0,1.5), ylim=c(0,10)
plot(model[pi], model1[pi], xlim=c(0,1.5), ylim=c(0,10))
plot(model, model1, xlim=c(0,1.5), ylim=c(0,10))
plot(model, model1, xlim=c(0,1.5), ylim=c(0,10))
plot(model[pi], model1[pi], xlim=c(0,1.5), ylim=c(0,10))
dev.off()
dev.off()
dev.off()
plot(model[pi], model1[pi], xlim=c(0,1.5), ylim=c(0,10))
model[pi]
model[sumstat_nucleotide_div()]
model[as.character(pi)]
model[list(pi)]
model[pi]
plot(model, model1, xlim=c(0,1.5), ylim=c(0,10))
model
model1
plot(model[stat_pi], model1[stat_pi], xlim=c(0,1.5), ylim=c(0,10))
plot(model, xlim=c(0,1.5), ylim=c(0,10))
model.mat<-as.matrix(model)
model.mat1<-fst.mat[model.mat,]
model.mat
plot(model, xlim=c(0,1.5), ylim=c(0,10))
dev.off()
dev.off()
plot(model, xlim=c(0,1.5), ylim=c(0,10))
plot(model.matrix(model))
plot(model.matrix(model1))
plot(model, xlim=c(0,1.5), ylim=c(0,10))
?coal_model
model<-coal_model(sample_size=100, loci_number = 0) + feat_mutation(0.5) + sumstat_nucleotide_div()
simulate(model)
model<-coal_model(sample_size=100, loci_number = 0) + feat_mutation(0.5) + sumstat_nucleotide_div()
simulate(model)
model<-coal_model(sample_size=100, loci_number = 1) + feat_mutation(0.5) + sumstat_nucleotide_div()
simulate(model)
model1<-coal_model(sample_size=100, loci_number = 0) + feat_mutation(0) + sumstat_nucleotide_div()
simulate(model1)
model1<-coal_model(sample_size=100, loci_number = 1) + feat_mutation(0) + sumstat_nucleotide_div()
simulate(model1)
model<-coal_model(sample_size=100, loci_number = 1) + feat_mutation(0.5) + sumstat_nucleotide_div()+sumstat_data()
model<-coal_model(sample_size=100, loci_number = 1) + feat_mutation(0.5) + sumstat_nucleotide_div()+calc_sumstats_from_data()
model<-coal_model(sample_size=100, loci_number = 1) + feat_mutation(0.5) + sumstat_nucleotide_div()
simulate(model)
model<-coal_model(sample_size=100, loci_number = 10) + feat_mutation(0.5) + sumstat_nucleotide_div()+calc_sumstats_from_data()
calc_sumstats_from_data(model=model)
simulate(model)
model<-coal_model(sample_size=100, loci_number = 10) + feat_mutation(0.5) + sumstat_nucleotide_div()+calc_sumstats_from_data(model=model)
simulate(model)
model<-coal_model(sample_size=100, loci_number = 10) + feat_mutation(0.5) + sumstat_nucleotide_div()+calc_sumstats_from_data(model=model, list(segsites))
model<-coal_model(sample_size=100, loci_number = 10) + feat_mutation(0.5) + sumstat_nucleotide_div()
segsites<-create_segsites(matrix(model))
segsites<-create_segsites(matrix(sumstat_nucleotide_div())
segsites<-create_segsites(matrix(sumstat_nucleotide_div()
segsites<-create_segsites(matrix(sumstat_nucleotide_div()))
model1<-coal_model(sample_size=100, loci_number = 10) + feat_mutation(0.5) + sumstat_nucleotide_div()
stat1<-simulate(model1, nsim = 1)
stat1#segsites<-create_segsites(matrix(sumstat_nucleotide_div()))
diversity<-stat1$pi
diversity#segsites<-create_segsites(matrix(sumstat_nucleotide_div()))
diversity2<-stat2$pi
stat2<-simulate(model2)
model2<-coal_model(sample_size=100, loci_number = 10) + feat_mutation(0) + sumstat_nucleotide_div()
stat2<-simulate(model2)
diversity2<-stat2$pi
diversity2
plot(stat1, stat2, xlim=c(0,1.5), ylim=c(0,10))
#model<-coal_model(sample_size=1000, loci_number = 2) + feat_mutation(0.5) + sumstat_nucleotide_div()
model3<-coal_model(10,50)+
feat_mutation(par_prior("theta", sample.int(100,1)))+
sumstat_nucleotide_div()
model3
simulate(model3)
stats3<-simulate(model3)
mean_pi<-sapply(stats3, function(x)mean(x$pi))
mean_pi<-sapply(stats3, function(x) mean(x$pi))
theta<-sapply(stats3, function(x) x$pars[["theta"]])
mean_pi<-sapply(stats3, function(x) mean(x.pi))
mean_pi<-sapply(stats3, function(x) mean(x$pi))
plot(stat1, stat3)
stats3<-simulate(model3)
plot(stat1, stat3)
stat3<-simulate(model3)
plot(stat1, stat3)
plot(diversity, diversity2, xlim=c(0,1.5), ylim=c(0,10))
diversity1<-stat1$pi
diversity1
plot(diversity1, diversity2, xlim=c(0,1.5), ylim=c(0,10))
dev.off()
pdf("005_extracredit.pdf")
plot(diversity1, diversity2, xlim=c(0,1.5), ylim=c(0,10))
dev.off()
dev.off()
plot(diversity1, diversity2, xlim=c(0,1.5), ylim=c(0,10))
diversity1
diversity2
plot(diversity2, diversity1, xlim=c(0,1.5), ylim=c(0,10))
plot(diversity1, diversity2, xlim=c(0,1.5), ylim=c(0,10))
