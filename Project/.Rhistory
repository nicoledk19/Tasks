}
monty
monty<-function(){
prize<-sample(1:3, 1)
choice<-sample(1:3, 1)
game<-sampel(c(1:3)[-c(choice, prize)], 1)
return(ifelse(prize!=choice, "Switch", "Stick"))
}
monty<-function(){
prize<-sample(1:3, 1)
choice<-sample(1:3, 1)
game<-sampel(c(1:3)[-c(choice, prize)], 1)
return(ifelse(prize!=choice, "Switch", "Stick"))
}
#Monty Hall Challenge
monty<-function(){
prize<-sample(1:3, 1)
choice<-sample(1:3, 1)
game<-sampel(c(1:3)[-c(choice, prize)], 1)
return(ifelse(prize!=choice, "Switch", "Stick"))
}
monty
monty()
monty<-function(){
prize<-sample(1:3, 1)
choice<-sample(1:3, 1)
game<-sample(c(1:3)[-c(choice, prize)], 1)
return(ifelse(prize!=choice, "Switch", "Stick"))
}
monty()
monty()
monty()
n<-10000
runs<-data.frame(n=numeric(), switch=numeric())
for(trials in n) {
run<-table(replicate(trials, monty()))
runs<-runs%>%add_row(n=trials, switch(sum(run["Switch"]))/trials)
}
n<-10000
runs<-data.frame(n=numeric(), switch=numeric())
for(trials in n) {
run<-table(replicate(trials, monty()))
runs<-runs%>%add_row(n=trials, switch(sum(run["Switch"]))/trials)
}
runs
runs[is.na(runs)]<-0
runs
for(trials in n) {
run<-table(replicate(trials, monty()))
runs<-runs %>% add_row(n=trials, switch(sum(run["Switch"]))/trials)
}
runs<-data.frame(n=numeric(), switch=numeric())
for(trials in n) {
run<-table(replicate(trials, monty()))
runs<-runs %>% add_row(n=trials, switch(sum(run["Switch"]))/trials)
}
i<-1
for(prize in 1:3){
for(choice in 1:3){
for(monty in c(1:3)[-c(prize, choice)]){
space<-space %>% add_row(choice=choice, game=game, prize=prize)
}
}
}
space<-space add_row(choice=choice, game=game, prize=prize)
i<-1
for(prize in 1:3){
for(choice in 1:3){
for(monty in c(1:3)[-c(prize, choice)]){
space<-space %>% add_row(choice=choice, game=game, prize=prize)
}
}
}
#Monty Hall Challenge
doors<-c("A", "B", "C")
xdata=c()
prize<-sample(doors)[1]
legnth(which(xdata="noswitching"))
doors<-c("A", "B", "C")
xdata=c()
for(i in 1:10000){
prize<-sample(doors)[1]
pick<-sample(doors)[1]
open<-sample(doors[which(doors!=pick&doors!=prize)])[1]
switches<-doors[which(doors!=pick&doors!=open)]
if(pick==prize){xdata=c(xdata, "noswitching")}
if(switches==prize){xdata=c(xdata, "switching")}
}
length(which(xdata=="switching"))
length(which(xdata="noswitching"))
length(which(xdata=="noswitching"))
y<-length(which(xdata=="switching"))
x<-length(which(xdata=="noswitching"))
y
x
pdf("plot10_ec01.pdf")
barplot(x, y)
dev.off()
dev.off()
barplot(x, y)
plot(x, y)
?barplot
height<-c(x,y)
barplot(height~prize)
barplot(height~xdata)
barplot(height~xdata, legend.text= c("Switching", "No Switching")
barplot(height, legend.text= c("Switching", "No Switching")
barplot(height, legend.text= c("Switching", "No Switching")
dev.off()
barplot(height, legend.text= c("Switching", "No Switching"))
barplot(height, legend.text= c("Switching", "No Switching"), col = c("red", "blue"))
y<-length(which(xdata=="switching"))
x<-length(which(xdata=="noswitching"))
y
x
height<-c(y,x)
pdf("plot10_ec01.pdf")
barplot(height, legend.text= c("Switching", "No Switching"), col = c("red", "blue"))
dev.off()
dev.off()
barplot(height, legend.text= c("Switching", "No Switching"), col = c("red", "blue"))
x
y
barplot(height, legend.text= c("Switching", "No Switching"), col = c("red", "blue"), ylim=7000)
barplot(height, legend.text= c("Switching", "No Switching"), col = c("red", "blue"))
?barplot
barplot(height, legend.text= c("Switching", "No Switching"), col = c("red", "blue")ylim=7000)
barplot(height, legend.text= c("Switching", "No Switching"), col = c("red", "blue"),ylim=7000)
barplot(height, legend.text= c("Switching", "No Switching"), col = c("red", "blue"),ylim=c(7000))
barplot(height, legend.text= c("Switching", "No Switching"), col = c("red", "blue"))
barplot(height, legend.text= c("Switching", "No Switching"), col = c("red", "blue"), names.arg=c("Switching", "No Switching"))
barplot(height, legend.text= c("Switching", "No Switching"), col = c("red", "blue"), names.arg=c("Switching", "No Switching"), main="Chances of Winning Prize", ylab="Chance of Winning Out of 10,000")
barplot(height, legend.text= c("Switching", "No Switching"), col = c("red", "blue"), names.arg=c("Switching", "No Switching"), main="Chances of Winning Prize", ylab="Chance of Winning Out of 10,000"), ylim=c(10000)
barplot(height, legend.text= c("Switching", "No Switching"), col = c("red", "blue"), names.arg=c("Switching", "No Switching"), main="Chances of Winning Prize", ylab="Chance of Winning Out of 10,000"), ylim=c(10000))
barplot(height, legend.text= c("Switching", "No Switching"), col = c("red", "blue"), names.arg=c("Switching", "No Switching"), main="Chances of Winning Prize", ylab="Chance of Winning Out of 10,000")
pdf("plot10_ec01.pdf")
barplot(height, legend.text= c("Switching", "No Switching"), col = c("red", "blue"), names.arg=c("Switching", "No Switching"), main="Chances of Winning Prize", ylab="Chance of Winning Out of 10,000")
dev.off()
install.packages("meme")
library("meme")
library("memery")
#meme Extra Credit
install.packages("memery")
install.packages("memery")
library("memery")
#install.packages("meme")
#library("meme")
#pic<-"https://www.liveabout.com/thmb/Fl0EUNIe7GbyBGivnKj-FDNB06s=/2133x1406/filters:fill(auto,1)/the-15-best-think-memes-4165651-1-5b05bcb5ff1b78003bd125c9.jpg"
txt1<-c("Can you put this in a for loop?", "ummm")
memery::meme("monkey.jpg", txt1, "monkey.jpg")
install.packages("meme")
library("meme")
install.packages("jpeg")
install.packages("jpeg")
library("jpeg")
get_templates
get_templates("memecaptain")
#meme Extra Credit
install.packages("memery")
library("memery")
meme_list()
meme_get("OffRamp")%>%
#pic<-"https://www.liveabout.com/thmb/Fl0EUNIe7GbyBGivnKj-FDNB06s=/2133x1406/filters:fill(auto,1)/the-15-best-think-memes-4165651-1-5b05bcb5ff1b78003bd125c9.jpg"
txt1<-c("Can you put this in a for loop?", "ummm")
meme_get("OffRamp")
install.packages("devtools")
meme_get("OffRamp")
devtools::install_github("sctyner/memer")
meme_list()
library(memer)
meme_list()
meme_get("OffRamp")
meme_get("Spongebob")
meme_get("ThinkAboutIt")
meme_get("Y-U-NOguy")
meme_get("Y-U-NOguy")%>%
meme_text_y-u-no("Y You No Do A For Loop")
meme_get("Y-U-NOguy")%>%
meme_text("Y You No Do A For Loop")
meme_get("Y-U-NOguy")%>%
meme_text_distbf("Y You No Do A For Loop")
meme_get("Y-U-NOguy")%>%
meme_text_top("Y You No Do A For Loop")
meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop")
meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop", "Bc IDK How")
meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc IDK How")
meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("IDK How")
meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc IDK How")
meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk How")
meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk how")
meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
jpeg("ForMeme.jpeg")
meme_list()
meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
dev.off()
jpeg("ForMeme.jpeg")
meme_list()
meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
dev.off()
dev.off()
dev.off()
x<-meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
meme_save(x, file="C:\\Users\\Nicole\\Desktop\\Evolution\\Tasks\\Task_10.jpeg")
memer::x
memer::meme("x")
memer::meme_get("x")
memer::meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
meme_list()
memer::meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
dev.off()
setwd('C:\\Users\\Nicole\\Desktop\\Evolution\\Tasks\\Task_10')
install.packages("devtools")
install.packages("devtools")
devtools::install_github("sctyner/memer")
force=TRUE
force=TRUE
library(memer)
meme_list()
memer::meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
dev.off()
jpeg("ForMeme1.jpeg")
meme_list()
memer::meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
dev.off()
png("ForMeme1.png")
meme_list()
memer::meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
dev.off()
devtools::as.package("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
dev.off()
png("ForMeme1.png")
meme_list()
meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
dev.off()
memer::meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
dev.off()
png("ForMeme1.png")
meme_list()
memer::meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
dev.off()
jpeg("ForMeme1.jpeg")
meme_list()
memer::meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
dev.off()
png(filename="ForMeme1.png")
meme_list()
memer::meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
dev.off()
setwd('C:\\Users\\Nicole\\Desktop\\Evolution\\Tasks\\Project')
Data1<-read.csv("AntData.csv")
jpeg("Phylogeny.jpeg")
text.string<-
"((F. Ulkei), (((F. Rufa Sp. #2), (F. Rufa Sp. #1, F. Obscuriventris)), (F. Dakotensis, F. Aserva)), ((F. Neorufibarbis), ((F. Neoclara), (F. Glacialis, F. Podzolica))));"
vert.tree<-read.tree(text=text.string)
setwd('C:\\Users\\Nicole\\Desktop\\Evolution\\Tasks\\Project')
Data1<-read.csv("AntData.csv")
#hypothesis:
#10 boxplots for 10 Species showing association between task and head width
VARtable <- data.frame(species=rep(NA, length=length(unique(Data1$Species))), HC=rep(NA, length=length(unique(Data1$Species))), NB=rep(NA, length=length(unique(Data1$Species))), PF=rep(NA, length=length(unique(Data1$Species))))
counter <- 1
for (i in unique(Data1$Species)){
Species <- Data1[which(Data1$Species == i),]
VARtable[counter,1] <- i
X <- Species$Task
repHC <- which(X == "HC")
repNB <- which(X == "NB")
repPF <- which(X == "PF")
Z <- rep(1, length(X))
Z[repHC] <- rnorm(length(repHC), 2, 0.05)
Z[repNB] <- rnorm(length(repNB), 3, 0.05)
Z[repPF] <- rnorm(length(repPF), 4, 0.05)
VARtable[counter,2:4] <- c(var(Species$Head.Width[repHC]), var(Species$Head.Width[repNB]), var(Species$Head.Width[repPF]))
counter <- counter+1
jpeg(paste(i, ".jpeg", sep=""))
par(las=1, mar=c(3,4,3,1), mgp=c(1.5, 0.5, 0), tck=-0.01)
plot(Z, Species$Head.Width, xlab="", ylab="head width", xaxt="n")
axis(1, at=c(2,3,4), labels=c("HC", "NB", "PF"))
mtext(i, side=3, line=1.5)
boxplot(Species$Head.Width~X, add=T, at=c(2,3,4), boxwex=0.25, col=c(rgb(1,0,0, .5), rgb(0,1,0, .5), rgb(0,0,1, .5)))
dev.off()
}
#multinomial logistic regression looking at head width and species impact on task assignment
library(nnet)
mlr <- multinom(Task ~ Head.Width + Species, data=Data1, Hess=TRUE, trace=FALSE)
mlr
summary(mlr)
z<-summary(mlr)$coefficients/summary(mlr)$standard.errors
z
p<-(1-pnorm(abs(z), 0, 1)) *2
p
exp(coef(mlr))
head(probability.table<-fitted(mlr))
confint(mlr)
exp(confint(mlr))
#boxplot of headwidth by task for all species
Data1$Task<-factor(Data1$Task, levels=c("HC", "NB", "PF"))
table(Data1$Task)
prop.table(table(Data1$Task))
library(ggplot2)
mlr2<-multinom(Task~Head.Width, data=Data1)
mlr2
summary(mlr2)
exp(coef(mlr2)['NB', 'Head.Width'])
exp(coef(mlr2)['PF', 'Head.Width'])
confint(mlr2)
exp(confint(mlr2))
jpeg("HeadWidthbyTaskboxplot.jpeg")
totalplot<-ggplot(Data1)+aes(x=Task, y=Head.Width)+geom_boxplot()
dev.off()
jpeg("HeadWidthbyTaskscatterplot.jpeg")
ggplot(Data1)+aes(y=Head.Width, x=Task)+geom_point(position=position_jitter(width=0.1, height=0))
dev.off()
#graph showing the predicted probability of a task assignment based on head width of an ant
library(ggeffects)
mlr_ME <- ggeffect(mlr, terms = "Head.Width[0.25:2.5,by=0.01]")
mlr_ME
jpeg("multinomialregression.jpeg")
Cols <- c('#a6cee3','#1f78b4','#b2df8a')
names(Cols) <- c("HC", "NB", "PF")
plot(mlr_ME$x, mlr_ME$predicted, pch=16, col=Cols[mlr_ME$response.level], xlim=c(0, 2.5), ylim=c(0,1), ylab="Predicted Probabilities", xlab="Head Width")
for (i in 1:length(mlr_ME$x)){
segments(mlr_ME$x[i], mlr_ME$conf.low[i], mlr_ME$x[i], mlr_ME$conf.high[i], lwd=1, col=Cols[mlr_ME$response.level[i]])
}
dev.off()
jpeg("Phylogeny.jpeg")
text.string<-
"((F. Ulkei), (((F. Rufa Sp. #2), (F. Rufa Sp. #1, F. Obscuriventris)), (F. Dakotensis, F. Aserva)), ((F. Neorufibarbis), ((F. Neoclara), (F. Glacialis, F. Podzolica))));"
vert.tree<-read.tree(text=text.string)
plot(vert.tree, edge.width=2)
dev.off()
text.string<-
"((F. Ulkei), (((F. Rufa Sp. #2), (F. Rufa Sp. #1, F. Obscuriventris)), (F. Dakotensis, F. Aserva)), ((F. Neorufibarbis), ((F. Neoclara), (F. Glacialis, F. Podzolica))));"
vert.tree<-read.tree(text=text.string)
plot(vert.tree, edge.width=2)
vert.tree<-read.tree(text=text.string)
text.string<-
"((F. Ulkei), (((F. rufa sp. 2), (F. rufa sp. 1, F. obscuriventris)), (F. dakotensis, F. aserva)), ((F. neorufibarbis), ((F. neoclara), (F. glacialis, F. poszolica))));"
vert.tree<-read.tree(text=text.string)
plot(vert.tree, edge.width=2)
Data1<-read.csv("AntData.csv")
mlr3<-multinom(Task~Head.Width+Group, data=Data1)
mlr3
summary(mlr)
summary(mlr3)
exp(coef(mlr3)['NB', 'Head.Width'])
exp(coef(mlr3)['PF', 'Head.Width'])
exp(coef(mlr2)['NB', 'Head.Width'])
confint(mlr2)
confint(mlr3)
summary(mlr2)
summary(mlr3)
zWald_test<-function(x){
zWald_modelo<-(summary(mlr3)$coefficients/summary(mlr3)$standard.errors)
a<-t(apply(zWald_model0, 1, function(x){x<qnorm(0.025, lower.tail=FALSE)}))
b<-t(apply(zWald_modelo, 1, function(x){x>-qnorm(0.025, lower.tail=FALSE)}))
ifelse(a==TRUE&b==TRUE, TRUE, FALSE)
}
zWald_test
zWald_modelo
zWald_test<-function(x){
zWald_modelo<-(summary(mlr3)$coefficients/summary(mlr3)$standard.errors)
a<-t(apply(zWald_model0, 1, function(x){x<qnorm(0.025, lower.tail=FALSE)}))
b<-t(apply(zWald_modelo, 1, function(x){x>-qnorm(0.025, lower.tail=FALSE)}))
ifelse(a==TRUE&b==TRUE, TRUE, FALSE)
}
zWald_modelo
zWald_test
a
setwd('C:\\Users\\Nicole\\Desktop\\Evolution\\Tasks\\Project')
zWald_test<-function(mlr3){
zWald_modelo<-(summary(mlr3)$coefficients/summary(mlr3)$standard.errors)
a<-t(apply(zWald_model0, 1, function(x){x<qnorm(0.025, lower.tail=FALSE)}))
b<-t(apply(zWald_modelo, 1, function(x){x>-qnorm(0.025, lower.tail=FALSE)}))
ifelse(a==TRUE&b==TRUE, TRUE, FALSE)
}
zWald_test
mlr3
pValue_extract<-function(mlr3){
z<-summary(mlr3)$coefficients/summary(mlr3)$standard.errors
p<-(1-pnorm(abs(z), 0,1))*2
p
}
p
p
pValue_extract<-function(mlr){
z1<-summary(mlr)$coefficients/summary(mlr)$standard.errors
p1<-(1-pnorm(abs(z), 0,1))*2
p1
}
p1
pValue_extract<-function(mlr){
z<-summary(mlr)$coefficients/summary(mlr)$standard.errors
p<-(1-pnorm(abs(z), 0,1))*2
p
}
p
summary(mlr)
confint(mlr)
summary(mlr)
exp(confint(mlr))
prop.table(table(Data1$Task))
exp(coef(mlr2)['NB', 'Head.Width'])
mlr2
mlr
confint(mlr)
mlr
summary(mlr)
summary(mlr3)
confint(mlr3)
mlr3
z<-summary(mlr)$coefficients/summary(mlr)$standard.errors
z
p<-(1-pnorm(abs(z), 0, 1)) *2
p
z2<-summary(mlr2)$coefficients/summary(mlr2)$standard.errors
z2
p2<-(1-pnorm(abs(z2), 0, 1)) *2
p2
z3<-summary(mlr3)$coefficients/summary(mlr3)$standard.errors
z3
p3<-(1-pnorm(abs(z3), 0, 1)) *2
p3
mlr2
mlr
summary(mlr)
mlr
mlr3
summary(mlr3)
confint(mlr)
summary(mlr2)
confint(mlr3)
summary(mlr)
setwd('C:\\Users\\Nicole\\Desktop\\Evolution\\Tasks\\Task_10')
#meme Extra Credit
#install.packages("memery")
#??memery
#library("memery")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("sctyner/memer")
library(memer)
png(filename="ForMeme1.png")
meme_list()
memer::meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
dev.off()
jpeg(filename="ForMeme1.jpeg")
meme_list()
memer::meme_get("Y-U-NOguy")%>%
meme_text_top("Why You No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
dev.off()
jpeg(filename="ForMeme1.jpeg")
meme_list()
memer::meme_get("Y-U-NOguy")%>%
meme_text_top("Y U No Do A For Loop") %>%
meme_text_bottom("Bc idk howwww")
dev.off()
setwd('C:\\Users\\Nicole\\Desktop\\Evolution\\Tasks\\Project')
mlr3
mlr3
summary(mlr3)
mlr3<-multinom(Task~Head.Width+Group, data=Data1)
setwd('C:\\Users\\Nicole\\Desktop\\Evolution\\Tasks\\Project')
Data1<-read.csv("AntData.csv")
mlr <- multinom(Task ~ Head.Width + Species, data=Data1, Hess=TRUE, trace=FALSE)
