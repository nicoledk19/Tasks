swirl()
swirl()
swirl()
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
# Returns TRUE if as.expression
# (e$expr) matches the expression indicated to the right
# of "=" in keyphrase
# keyphrase:equivalent=expression
runTest.equivalent <- function(keyphrase,e) {
return(omnitest(rightside(keyphrase)))
}
23
equivalent = 3
library(swirl)
swirl()
5+7
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
library(swirl)
swirl()
library(swirl)
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args()
args(list.files())
args(list.files)
old.dir<-list.files
old.dir<-getwd()
testdir<-dir.create()
dir.create()
dir.create(testdir)
testdir<-dir.create(old.dir)
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest2.R")
file.rename("mytest.R, mytest2.R")
file.rename()
file.rename(mytest.R)
file.rename(mytest.R, mytest2.R)
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive=TRUE))
dir.create(file.path("testdir2", "testdir3"), recursive=TRUE)
setwd(old.dir)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
ls()
delete.dir(testdir)
?delete
??delete
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0, 10, 100)
z*2+1000
my_div
library(swirl)
swirl()
getwd()
ls()
library(swirl)
swirl()
x<-9
ls()
list.files()
?list.files
args(list.files)
old.dir<-list.files
old.dir<-getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2", "testdir3", recursive=TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq<-seq(5, 10, length=30)
length("my_seq")
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect<-c(0.5, 55, -10, 6)
tf<-num_vect<1
tf
num_vect >=6
my_char<-c("My", "name", "is")
my_char
paste("my_char")
paste(my_char, collapse =" ")
c(my_char, "Nicole")
my_name<-c(my_char, "Nicole")
my_name
paste(my_char, collapse" ")
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world", sep=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X", "Y", "Z")), sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
s*3
x*3
y<-rnorm(1000)
z<-rep(NA, 1000)
my_data <-sampel(c(y,z), 100)
my_data <-sample(c(y,z), 100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect<-c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2<-c(11, 2, NA)
names(vect2)<-c("foo", "bar", "norf")
identical(vect, vect2)
vect[2]
vect["bar"]
vect[c("foo", "bar")]
library(swirl)
swirl()
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data)<-cnames
my_data
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
TRUE != FALSE
5!=7
5!=7
5!==7
!5==7
FALSE&FALSE
TRUE &c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6 != 8 && 4>3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
x
x
function(x)
boring_function
x
sumbit()
submit()
submit()
submit()
boring_function <- function(x)
x
x
submit()
boring_function('My first function!')
boring_function
submit()
sum(my_vector)
length(my_vector)
my_mean<-210/20
submit()
sum(my_vector)/length(my_vector)
submit()# Write your code here!
my_mean
submit()
}
sum(my_vector)/length(my_vector)
sum(my_vector)
length(my_vector)}
my_mean <- function(my_vector) {
sum(my_vector)
length(my_vector)
}
submit()
sum(my_vector)/length(my_vector)
submit()
boring_function
boring_function('My first function!')
library(swirl)
swirl()
submit()
submit()
sum(my_mean)/length(my_mean)
sum(my_mean)
sum(my_vector)submit()
submit()
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function')}
boring_function <- function(x) {
x
submit()
boring_function('My first function')
}
boring_function('My first function!')
x
submit()
boring_function('My first function!')
}
boring_function('My first function!')
boring_function}
boring_function
x
submit()
boring_function('My first function!')
boring_function
}
submit()
# Write your code here!
# Remember: the last expression evaluated will be returned!
sum(my_vector)
# Write your code here!
# Remember: the last expression evaluated will be returned!
sum(my_mean)
# Write your code here!
# Remember: the last expression evaluated will be returned!
sum(my_vector)
submit()
# Write your code here!
# Remember: the last expression evaluated will be returned!
sum(my_vector)/length(my_vector)
submit()
function()
function(my_vector)
my_vector
submit()
submit()
# Write your code here!
# Remember: the last expression evaluated will be returned!
sum()/length()
submit()
# Write your code here!
# Remember: the last expression evaluated will be returned!
sum(my_vector)/length(my_vector)
submit()
# Write your code here!
# Remember: the last expression evaluated will be returned!
sum(my_vector)/length(my_vector)
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div+2)
remainder(4, div=2)
args(remainder)
sumbit()
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){8}, c(8,4,0))
evaluate(function(x){c(8)}, c(8,4,0))
evaluate(function(x), c(8,4,0))
evaluate(function(x){c(8)}, c(8,4,0))
info()
evaluate(function(x){8}, c(4,0))
evaluate(function(x), c(4,0))
evaluate(function(x){c=1}, c(8,4,0))
evaluate(function(x){x[1}], c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[x(length(x))]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("How",  "are", "you", "today?")
submit()
submit()
submit()
mad_libs(China, happy, pencil)
mad_libs("China", "happy", "pencil")
submit()
%p%("I", "love", "R!")
"I", %p%, "love", %p%, "R!")
"I", %p%, "love", %p%, "R!"
"I", %p%, "love", %p%, "R!"
"I" %p% "love" %p% "R!"
